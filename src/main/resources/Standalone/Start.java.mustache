package {{groupId}};

import org.eclipse.jetty.server.*;
import org.eclipse.jetty.server.handler.AbstractHandler;
import org.eclipse.jetty.server.handler.HandlerList;
import org.eclipse.jetty.server.handler.ResourceHandler;
import org.eclipse.jetty.webapp.WebAppContext;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.core.Response;
import java.io.IOException;
import java.net.URL;
import java.security.ProtectionDomain;

public class Start {

    /**
     * @param args
     * @throws Exception
     */
    public static void main(String[] args) throws Exception {
        Server server = new Server();
        int port = 8002;
        ServerConnector connector = new ServerConnector(server);
        connector.setPort(port);

        HttpConfiguration https = new HttpConfiguration();
        https.addCustomizer(new SecureRequestCustomizer());

        server.setConnectors(new Connector[] { connector });

        WebAppContext context = new WebAppContext();
        context.setServer(server);
        context.setContextPath("/");

        ProtectionDomain protectionDomain = Start.class
                .getProtectionDomain();
        URL location = protectionDomain.getCodeSource().getLocation();
        context.setWar(location.toExternalForm());

        final Handler resourceHandler = new AbstractHandler() {
            @Override
            public void handle(String s, Request request, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse) throws IOException, ServletException {

                URL resource = getClass().getClassLoader().getResource(s.substring(1));
                if (s.startsWith("/swagger-ui/")) {
                    if (resource != null) {
                        httpServletResponse.setStatus(HttpServletResponse.SC_OK);
                        org.apache.commons.io.IOUtils.copy(resource.openStream(), httpServletResponse.getOutputStream());
                        System.out.println("got OK: " + s);
                        ((Request) request).setHandled(true);
                    } else {
                        httpServletResponse.setStatus(HttpServletResponse.SC_NOT_FOUND);
                        System.out.println("got Not Found: " + s);
                        ((Request)request).setHandled(true);
                    }
                }
                else {
                    System.out.println("not handled: " + s);
                    ((Request)request).setHandled(false);
                }
            }
        };

        ResourceHandler resource_handler = new ResourceHandler();
        // Configure the ResourceHandler. Setting the resource base indicates where the files should be served out of.
        // In this example it is the current directory but it can be configured to anything that the jvm has access to.
        resource_handler.setDirectoriesListed(true);
        resource_handler.setWelcomeFiles(new String[]{ "index.html" });
        resource_handler.setResourceBase(".");

        HandlerList handlers = new HandlerList();
        handlers.setHandlers(new Handler[] {resourceHandler, context});

        server.setHandler(handlers);
        while (true) {
            try {
                server.start();
                System.out.println("The server is now running at port " + port);
                break;
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        try {
            System.in.read();
            server.stop();
            server.join();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(100);
        }
    }

}